{
	"info": {
		"_postman_id": "9c805410-19cc-48db-83d8-c4c29739e704",
		"name": "Igor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Igor",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "Igor",
							"disabled": true
						},
						{
							"key": "password",
							"value": "Igor",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json\r",
							"pm.test(\"Test\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.person.u_name).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.person.u_age).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.person.u_salary_1_5_year).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.start_qa_salary).to.be.a(\"number\"); \r",
							"    \r",
							"});\r",
							"\r",
							"//Проверка правильности перемножения на коэффицента\r",
							"pm.test(\"eql.salary\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql((jsonData.start_qa_salary * 2.9));\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql((jsonData.start_qa_salary * 2));\r",
							"     pm.expect(jsonData.person.u_salary_1_5_year).to.eql((jsonData.start_qa_salary * 4));\r",
							"     console.log(jsonData.start_qa_salary * 2.9);\r",
							"     console.log(jsonData.start_qa_salary * 2);\r",
							"     console.log(jsonData.start_qa_salary * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"auth_token\": \"{{token}}\",\r\n\"name\": \"Igor\",\r\n\"age\": 31,\r\n\"salary\": 1000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json\r",
							"pm.test(\"Test\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.salary).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//Проверка правильности перемножения на коэффицента\r",
							"let req = request.data \r",
							"let req_salary = req.salary\r",
							"\r",
							"pm.test(\"salary\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(parseInt(req_salary));\r",
							"    pm.expect(jsonData.salary[1]).to.eql(String(req_salary * 2));\r",
							"    pm.expect(jsonData.salary[2]).to.eql(String(req_salary * 3));\r",
							"});\r",
							"console.log(req_salary * 2)\r",
							"console.log(req_salary * 3)\r",
							"\r",
							"\r",
							"// Сравнение элементов массива\r",
							"pm.test(\"salary\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"pm.expect(true).to.eql(jsonData.salary[2]>jsonData.salary[0]&&jsonData.salary[2]>jsonData.salary[1]);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"age\": 31,\r",
							"            \"name\": \"Igor\",\r",
							"            \"salary\": [\r",
							"                1000,\r",
							"                \"2000\",\r",
							"                \"3000\"\r",
							"            ]\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"$id\": \"#/properties/age\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The age schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                31\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"$id\": \"#/properties/name\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The name schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Igor\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"$id\": \"#/properties/salary\",\r",
							"            \"type\": \"array\",\r",
							"            \"title\": \"The salary schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": [],\r",
							"            \"examples\": [\r",
							"                [\r",
							"                    1000,\r",
							"                    \"2000\"\r",
							"                ]\r",
							"            ],\r",
							"            \"additionalItems\": true,\r",
							"            \"items\": {\r",
							"                \"$id\": \"#/properties/salary/items\",\r",
							"                \"anyOf\": [\r",
							"                    {\r",
							"                        \"$id\": \"#/properties/salary/items/anyOf/0\",\r",
							"                        \"type\": \"integer\",\r",
							"                        \"title\": \"The first anyOf schema\",\r",
							"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                        \"default\": 0,\r",
							"                        \"examples\": [\r",
							"                            1000\r",
							"                        ]\r",
							"                    },\r",
							"                    {\r",
							"                        \"$id\": \"#/properties/salary/items/anyOf/1\",\r",
							"                        \"type\": \"string\",\r",
							"                        \"title\": \"The second anyOf schema\",\r",
							"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                        \"default\": \"\",\r",
							"                        \"examples\": [\r",
							"                            \"2000\",\r",
							"                            \"3000\"\r",
							"                        ]\r",
							"                    }\r",
							"                ]\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"name\", function() {\r",
							"    var jsonData = JSON.parse(responseBody);\r",
							"    //var jsonData = pm.request.json();\r",
							"pm.environment.set(\"name\",jsonData.name);\r",
							"});\r",
							"// проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json\r",
							"pm.test(\"Test\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.daily_food).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.daily_sleep).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"// Проверка правильности перемножения коэффицентов\r",
							"\r",
							"let req = request.data \r",
							"let weight = req.weight\r",
							"pm.test(\"weight\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.daily_food).to.eql(weight * 0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight * 2.5);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "2",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json\r",
							"pm.test(\"Test\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.salary).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.family.children).to.be.a(\"array\");\r",
							"});\r",
							"\r",
							"// Проверить что занчение поля name = значению переменной name из окружения\r",
							"let req = request.data \r",
							"let name = req.name\r",
							"\r",
							"pm.test(\"name\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(name);\r",
							"});\r",
							"\r",
							"// Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let reques = request.data \r",
							"let age = reques.age\r",
							"\r",
							"pm.test(\"age\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(age);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "u_salary_1_5_year",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}\\get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test (\"Random element\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    const randomElement = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
							"    console.log(randomElement.Cur_ID);\r",
							"    pm.environment.set(\"Cur_ID\", randomElement.Cur_ID)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// проверка статус кода 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "randomNum",
			"value": ""
		}
	]
}